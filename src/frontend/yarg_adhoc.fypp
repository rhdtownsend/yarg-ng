! Program : yarg_adhoc
! Purpose : create an ad-hoc clump distribution
!
! Copyright 2021-2022 Rich Townsend
!
! This file is part of Yarg. Yarg is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! Yarg is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program yarg_adhoc

   ! Uses

   use forum_m

   use yarg_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables

   character(:), allocatable  :: input_file
   integer                    :: unit
   type(clump_t), allocatable :: clumps(:)
   character(LEN=NAME_LEN)    :: output_file
   type(hdf5io_t)             :: hdf5io

   ! Perform initializations

   @:ASSERT(n_arg() == 1, 'Syntax: yarg_wind input_file')

   call get_arg(1, input_file)

   open(NEWUNIT=unit, FILE=input_file, STATUS='OLD')

   call init_clump(unit, clumps)
   call init_run(unit, output_file)

   close(unit)

   ! Write out the results

   hdf5io = hdf5io_t(output_file, CREATE_FILE)
   call write_clumps(hdf5io, clumps)
   call hdf5io%final()

   write(OUTPUT_UNIT, *) 'Clumps:', SIZE(clumps)

   ! Finish

contains

   subroutine init_clump(unit, clumps)

      integer, intent(in)                     :: unit
      type(clump_t), allocatable, intent(out) :: clumps(:)

      integer  :: n_clump
      real(RD) :: r
      real(RD) :: theta
      real(RD) :: phi
      real(RD) :: l
      real(RD) :: chi
      integer  :: i

      namelist /clump/ r, theta, phi, l, chi

      ! Determine the number of clump namelists

      rewind(unit)

      n_clump = 0

      do
         read(unit, NML=clump, END=100)
         n_clump = n_clump + 1
      end do

100   continue

      ! Read clump parameters

      allocate(clumps(n_clump))

      rewind(unit)

      clump_loop: do i = 1, n_clump

         r = 2._RD     ! Clump radial coordinate
         theta = 0._RD ! Clump polar coordinate
         phi = 0._RD   ! Clump azimuthal coordinate

         l = 0.1_RD    ! Clump radius
         chi = 1._RD   ! Clump chi=kappa*rho

         read(unit, NML=clump)

         theta = theta*DEG_TO_RAD
         phi = phi*DEG_TO_RAD

         clumps(i)%r(1) = r*SIN(theta)*COS(phi)
         clumps(i)%r(2) = r*SIN(theta)*SIN(phi)
         clumps(i)%r(3) = r*COS(theta)

         clumps(i)%l = l
         clumps(i)%chi = chi

      end do clump_loop

      ! Finish

      return

   end subroutine init_clump

   !****

   subroutine init_run(unit, output_file)

      integer, intent(in)       :: unit
      character(*), intent(out) :: output_file

      namelist /run/ output_file

      ! Read the run parameters

      rewind(unit)

      output_file = ''

      read(unit, NML=run)

      ! Finish

      return

   end subroutine init_run

end program yarg_adhoc
