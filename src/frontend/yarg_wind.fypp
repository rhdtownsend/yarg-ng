! Program : yarg_wind
! Purpose : create a time-series of wind clump distributions and write to files
!
! Copyright 2021-2022 Rich Townsend
!
! This file is part of Yarg. Yarg is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! Yarg is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program yarg_wind

   ! Uses

   use forum_m

   use yarg_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables
   
   character(:), allocatable  :: input_file
   integer                    :: unit
   type(cubint_t)             :: r_t
   real(RD)                   :: N_dot
   real(RD)                   :: l_star
   real(RD)                   :: chi_star
   integer                    :: n_t
   real(RD)                   :: dt
   character(NAME_LEN)        :: output_prefix
   real(RD)                   :: t_sim_max
   real(RD)                   :: t_min
   real(RD)                   :: t_max
   real(RD)                   :: t_flow
   integer                    :: n_em
   integer                    :: d_em
   real(RD), allocatable      :: t_em(:)
   real(RD), allocatable      :: theta_em(:)
   real(RD), allocatable      :: phi_em(:)
   real(RD)                   :: t
   real(RD)                   :: t_sim
   logical, allocatable       :: mask(:)
   integer                    :: i_t
   type(clump_t), allocatable :: clumps(:)
   character(LEN=6)           :: infix
   type(hdf5io_t)             :: hdf5io

   ! Perform initializations

   @:ASSERT(n_arg() == 1, 'Syntax: yarg_wind input_file')

   call get_arg(1, input_file)

   open(NEWUNIT=unit, FILE=input_file, STATUS='OLD')

   call init_wind(unit, r_t)
   call init_clump(unit, N_dot, l_star, chi_star)
   call init_random(unit)
   call init_run(unit, n_t, dt, output_prefix)

   close(unit)

   t_sim_max = dt*(n_t-1)

   ! Set up the clump emission times and angles

   call r_t%get_x_min(t_min)
   call r_t%get_x_max(t_max)

   t_flow = t_max - t_min

   n_em = 0
   d_em = 2*CEILING((t_flow + t_sim_max)*N_dot) ! Factor 2 being conservative

   allocate(t_em(d_em))
   allocate(theta_em(d_em))
   allocate(phi_em(d_em))

   t = -t_flow

   clump_loop : do

      ! Check for completion

      if(t > t_sim_max) exit clump_loop

      ! Store clump parameters

      n_em = n_em + 1

      t_em(n_em) = t
      theta_em(n_em) = ACOS(MIN(MAX(-1._RD + 2._RD*random(), -1._RD), 1._RD))
      phi_em(n_em) = TWOPI*random()

      ! Update the clump emission time (Poisson process with mean
      ! separation 1/N_dot)

      t = t - LOG(1._RD - random())/N_dot

      ! Loop around

   end do clump_loop

   ! Shrink arrays

   call reallocate(t_em, [n_em])
   call reallocate(theta_em, [n_em])
   call reallocate(phi_em, [n_em])

  ! Now loop through simulation time
   
   allocate(mask(n_em))

   sim_loop : do i_t = 1, n_t

      t_sim = (i_t-1)*dt
     
      ! Instantiate the clumps that were emitted up to t_flow before the
      ! current simulation time

      mask = t_em >= t_sim - t_flow .AND. &
             t_em <= t_sim

      clumps = create_clumps(r_t, &
                             PACK(t_sim - t_em, MASK=mask), &
                             PACK(theta_em, MASK=mask), &
                             PACK(phi_em, MASK=mask), N_dot, l_star, chi_star)

      ! Write out the clump file

      write(infix, 100) i_t
100   format(I6.6)

      hdf5io = hdf5io_t(TRIM(output_prefix)//infix//'.h5', CREATE_FILE)
      call write_clumps(hdf5io, clumps)
      call hdf5io%final()

      write(OUTPUT_UNIT, *) 'Written : ', i_t, SIZE(clumps)
     
      ! Loop around

   end do sim_loop

   ! Finish

contains

   subroutine init_wind(unit, r_t)

      integer, intent(in)         :: unit
      type(cubint_t), intent(out) :: r_t

      real(RD)              :: beta
      real(RD)              :: R_clump_in
      real(RD)              :: R_clump_ex
      integer               :: n
      real(RD)              :: v_in
      real(RD)              :: v_ex
      integer               :: i
      real(RD), allocatable :: v(:)
      real(RD), allocatable :: r(:)
      real(RD), allocatable :: dv_dr(:)
      type(cubint_t)        :: f
      real(RD), allocatable :: t(:)

      namelist /wind/ beta, R_clump_in, R_clump_ex, n

      ! Read the wind parameters

      rewind(unit)

      beta = 1._RD ! Velocity-law exponent

      R_clump_in = 1.1_RD  ! Inner radius of clumps
      R_clump_ex = 10._RD  ! Outer radius of clumps

      n = 1024 ! Number of points to use in arrays/cubints

      read(unit, NML=wind)

      @:ASSERT(R_clump_in > 1._RD, 'R_clump_in must be greater than unity')
      @:ASSERT(R_clump_in < R_clump_ex, 'R_clump in must be less than R_clump_ex')

      ! Set up the wind flow interpolants

      ! First, tabulate v and r(v)

      allocate(v(n))
      allocate(r(n))
      allocate(dv_dr(n))

      v_in = (1._RD - 1._RD/R_clump_in)**beta
      v_ex = (1._RD - 1._RD/R_clump_ex)**beta

      v = [((v_in*(n - i) + v_ex*(i - 1))/(n - 1),i=1,n)]

      if (ABS(beta) > EPSILON(1._RD)) then
         r = 1._RD/(1._RD - v**(1._RD/beta))
         dv_dr = beta*(1._RD - 1._RD/r)**(beta-1._RD)/r**2
      else
         r = [((R_clump_in*(n - i) + R_clump_ex*(i - 1))/(n - 1),i=1,n)]
         dv_dr = 0._RD
         print *,'Warning: wind at terminal velocity throughout'
      endif

      ! Use a cubic interpolant to integrate f = 1/v = dt/dr and find the
      ! wind travel time from r=R_clump_in to each velocity/radius

      f = cubint_t(r, 1._RD/v, -dv_dr/v**2)

      t = f%integ(r)

      ! Set up interpolant for r(t)

      r_t = cubint_t(t, r, v)

      ! Finish

      return

   end subroutine init_wind

   !****

   subroutine init_clump (unit, N_dot, l_star, chi_star)

      integer, intent(in)   :: unit
      real(RD), intent(out) :: N_dot
      real(RD), intent(out) :: l_star
      real(RD), intent(out) :: chi_star

      real(RD) :: tau_star

      namelist /clump/ tau_star, N_dot, l_star
      
      ! Read the clump parameters

      rewind(unit)

      tau_star = 1._RD ! Smooth-wind optical depth
      N_dot = 1._RD    ! Clump passage rate
      l_star = 0.1_RD  ! Clump radius at stellar surface

      read(unit, NML=clump)

      ! Set up related parameters

      chi_star = 3.*tau_star/(N_dot*l_star**3) ! clump chi=kappa*rho at stellar surface

      ! Finish

      return

   end subroutine init_clump

   !****

   subroutine init_random (unit)

      integer, intent(in)  :: unit

      integer :: seed_base

      namelist /random/ seed_base

      ! Read the RNG parameters

      rewind(unit)

      seed_base = 0

      read(unit, NML=random)

      ! Seed the RNG

      call set_seed(seed_base)

      ! Finish

      return

   end subroutine init_random

   !****

   subroutine init_run (unit, n_t, dt, output_prefix)

      integer, intent(in)       :: unit
      integer, intent(out)      :: n_t
      real(RD), intent(out)     :: dt
      character(*), intent(out) :: output_prefix

      namelist /run/ n_t, dt, output_prefix

      ! Read the run parameters

      rewind(unit)

      n_t = 100                 ! Number of timesteps in run
      dt = 0.1_RD               ! Size of timestep
      output_prefix = 'clumps-' ! Prefix of output files
      
      read(unit, NML=run)

      ! Finish

      return

   end subroutine init_run

   !****

   function create_clumps (r_t, t_clumps, theta, phi, N, l_star, chi_star) result(clumps)

      type(cubint_t), intent(in) :: r_t
      real(RD), intent(in)       :: t_clumps(:)
      real(RD), intent(in)       :: theta(:)
      real(RD), intent(in)       :: phi(:)
      real(RD), intent(in)       :: N
      real(RD), intent(in)       :: l_star
      real(RD), intent(in)       :: chi_star
      type(clump_t), allocatable :: clumps(:)

      real(RD) :: r(SIZE(t_clumps))

      ! Calculate radial coordinates

      r = r_t%func(t_clumps)

      ! Set up the clumps

      allocate(clumps(SIZE(t_clumps)))

      ! Position coordinates

      clumps%r(1) = r*SIN(theta)*COS(phi)
      clumps%r(2) = r*SIN(theta)*SIN(phi)
      clumps%r(3) = r*COS(theta)

      ! Clump radius

      clumps%l = l_star*r

      ! Clump chi=kappa*rho

      clumps%chi = chi_star/r**3

      ! Finish

      return

   end function create_clumps

end program yarg_wind
